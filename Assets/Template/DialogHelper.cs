
/* Assets/菜单下创建菜单“打包窗口数据” - 创建自动注入脚本 */

/*using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using UnityEditor;
using System.IO;
using System.Text;
using Carc;

public class DialogHelper  {

    private static string dialogJsonData = Application.dataPath + "/Resources/DialogIndData/";
    private static string jsonFileName = "DialogFilePathInfo.json";
    private static string dialogScritPath = dialogJsonData;
    private static string removeFilePath = "Assets/Resources/";

    [MenuItem("Assets/打包窗口数据", false, 0)]
    public static void SaveDialogDataJson()
    {
        Dictionary<string, List<KeyValuePair<string,string>>> tempDiglonNameDic = new Dictionary<string, List<KeyValuePair<string,string>>>();

        string tempFilePath = dialogJsonData + jsonFileName;
        string tempSelectFilePath = "Assets/Resources/Prefab";
        string[] tempFolderPathAry = AssetDatabase.FindAssets("t:Folder", new string[1] { tempSelectFilePath });
        for (int i = 0; i < tempFolderPathAry.Length; i++)
        {
            string tempAssetFolderPath = AssetDatabase.GUIDToAssetPath(tempFolderPathAry[i]);
            string[] tempFilePathAry = AssetDatabase.FindAssets("t:prefab", new string[1] { tempAssetFolderPath });
            if (tempFilePathAry == null || tempFilePathAry.Length == 0)
            {
                continue;
            }
            int tempIndex = tempAssetFolderPath.LastIndexOf("/");
            string tempFolderName = tempAssetFolderPath.Substring(tempIndex + 1);
            List<KeyValuePair<string,string>> tempDialogNameList;
            if (!tempDiglonNameDic.TryGetValue(tempFolderName, out tempDialogNameList))
            {
                tempDialogNameList = new List<KeyValuePair<string,string>>();
                tempDiglonNameDic.Add(tempFolderName,tempDialogNameList);
            }

            for (int k = 0; k < tempFilePathAry.Length; k++)
            {
                string tempPrefabObjectPath = AssetDatabase.GUIDToAssetPath(tempFilePathAry[k]);
                var tempDialogObject = AssetDatabase.LoadAssetAtPath<GameObject>(tempPrefabObjectPath);
                Dialog tempDialog = tempDialogObject.GetComponent<Dialog>();
                if (tempDialog != null)
                {
                    string tempFileName = tempDialog.GetType().Name;
                    string tempPrefabFilePath = tempPrefabObjectPath.Replace(removeFilePath, "").Replace(".prefab", "");
                    KeyValuePair<string, string> tempKeyValue = new KeyValuePair<string, string>(tempFileName,tempPrefabFilePath);
                    if (!tempDialogNameList.Contains(tempKeyValue))
                    {
                        tempDialogNameList.Add(tempKeyValue);
                    }
                }
            }
        }
        WriteJsonFile(tempDiglonNameDic);
        WriteBindInfo(tempDiglonNameDic);
        AssetDatabase.SaveAssets();
        AssetDatabase.Refresh();
    }

    //写入json数据
    static void WriteJsonFile(Dictionary<string,List<KeyValuePair<string,string>>> _dialogNameDic)
    {
        if (_dialogNameDic.Count == 0)
        {
            return;
        }
        string tempFilePath = dialogJsonData + jsonFileName;
        if (File.Exists(tempFilePath))
        {
            File.Delete(tempFilePath);
        }
        StringBuilder sb = new StringBuilder();

        sb.Append("{\n");




        foreach (KeyValuePair<string, List<KeyValuePair<string, string>>> item in _dialogNameDic)
        {
            string tempFolderName = item.Key;
            List<KeyValuePair<string, string>> tempDialogList = item.Value;

            for (int i = 0; i < tempDialogList.Count; i++)
            {
                KeyValuePair<string, string> tempKeyValue = tempDialogList[i];
                sb.Append("\"").Append(tempKeyValue.Key).Append("\": ")
                .Append("\"").Append(tempKeyValue.Value).Append("\"");

                sb.Append(",");
                sb.Append("\n\n");
            }
        }

        sb.Append("}\n");

        File.WriteAllText(tempFilePath, sb.ToString());
    }

    //创建json对应的class类
    static void WriteScprit(List<string> _keyList, List<string> _valueList)
    {
        if (_keyList.Count != _valueList.Count || _keyList.Count == 0)
        {
            return;
        }
        var outputPath = dialogScritPath + "DialogFilePathInfo.cs";
        if (File.Exists(outputPath))
        {
            File.Delete(outputPath);
        }
        string thisFile = Path.GetFileName(new System.Diagnostics.StackTrace(true).GetFrame(0).GetFileName());
        string output = "";

        output += "// This class is auto-generated by " + thisFile + ".\n";
        output += "// DON'T modify manually.\n\n";

        output += "public class DialogInfo\n";
        output += "{\n";

        for (int i = 0; i < _keyList.Count; i++)
        {
            output += "    public const string " + _keyList[i] + " = \"" + _valueList[i] + "\";\n";
        }

        output += "}\n";

        File.WriteAllText(outputPath, output);
    }

    //创建绑定信息
    static void WriteBindInfo(Dictionary<string,List<KeyValuePair<string,string>>> _dialogNameDic)
    {
        if (_dialogNameDic == null || _dialogNameDic.Count == 0)
        {
            return;
        }
        var outputPath = dialogScritPath + "DialogContainerBindInfo.cs";
        if (File.Exists(outputPath))
        {
            File.Delete(outputPath);
        }
        string thisFile = Path.GetFileName(new System.Diagnostics.StackTrace(true).GetFrame(0).GetFileName());
        string output = "";
        string tempBind = "\t\t\t_container.Bind<{0}>().FromComponentInNewPrefabResource(\"{1}\").AsTransient()";

        output += "// This class is auto-generated by " + thisFile + ".\n";
        output += "// DON'T modify manually.\n\n";

        output += "using Zenject;\n";
        output += "\n";
        output += "namespace Carc\n";
        output += "{\n";
        output += "\tpublic class DialogContainerBindInfo\n";
        output += "\t{\n";


        foreach (KeyValuePair<string,List<KeyValuePair<string,string>>> item in _dialogNameDic)
        {
            string tempFolderName = item.Key;
            List<KeyValuePair<string,string>> tempDialogList = item.Value;

            output += "\t\tpublic void {0}BindDialog(DiContainer _container)\n".Replace("{0}",tempFolderName);
            output += "\t\t{\n";

            for (int i = 0; i < tempDialogList.Count; i++)
            {
                string tempBindInfo = string.Format(tempBind, tempDialogList[i].Key, tempDialogList[i].Value);
                output += tempBindInfo + ";\n";
            }
            output += "\t\t}\n";
        }

        output += "\t}\n";
        output += "}\n";

        File.WriteAllText(outputPath, output);
    }
}*/
